#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re
import math
import glob
import os
import sys
import json
from lxml import etree
from lxml.builder import E
from svg.path import parse_path
from os.path import basename, abspath
from copy import deepcopy
from textwrap import dedent as d
import bezier_cubic
from settings import *


def compute_path_len(path):
    return parse_path(path).length(error=1e-8)


def shescape(path):
    return "'"+re.sub(r"(?=['\\\\])", "\\\\", path)+"'"


# we will need this to deal with svg
namespaces = {'n': "http://www.w3.org/2000/svg"}
etree.register_namespace("xlink", "http://www.w3.org/1999/xlink")
parser = etree.XMLParser(remove_blank_text=True)


def create_image(filename):
    print('processing %s' % filename)
    filename_noext = re.sub(r'\.[^\.]+$', '', filename)
    filename_noext_ascii = re.sub(r'\\([\\u])', '\\1',
                                  json.dumps(filename_noext))[1:-1]
    baseid = basename(filename_noext_ascii)

    # load xml
    doc = etree.parse(filename, parser)

    # for xlink namespace introduction
    doc.getroot().set('{http://www.w3.org/1999/xlink}used', '')

    # clear all extra elements this program may have previously added
    for el in doc.xpath("/n:svg/n:style", namespaces=namespaces):
        if re.match(r'-Kanimaji$', g.get('id')):
            doc.getroot().remove(el)
    for g in doc.xpath("/n:svg/n:g", namespaces=namespaces):
        if re.match(r'-Kanimaji$', g.get('id')):
            doc.getroot().remove(g)

    css_header = d("""
    /* CSS automatically generated by kanimaji.py, do not edit! */
    """)
    static_css = css_header

    # add css elements for all strokes
    for g in doc.xpath("/n:svg/n:g", namespaces=namespaces):
        groupid = g.get('id')
        if re.match(r'^kvg:StrokeNumbers_', groupid):
            rule = d("""
                #%s {
                    display: none;
                }""" % re.sub(r':', '\\\\3a ', groupid))
            static_css += rule
            continue

        gidcss = re.sub(r':', '\\\\3a ', groupid)
        rule = d("""
            #%s {
                stroke-width: %.01fpx !important;
                stroke:       %s !important;
            }""" % (gidcss, STOKE_BORDER_WIDTH, STOKE_FILLED_COLOR))
        static_css += rule

        static_css += d("""
            svg {
                background-color: %s;
            }""" % GIF_BACKGROUND_COLOR)

    svgexport_data = []
    svgframefile = filename_noext_ascii + "_frame0000.svg"
    pngframefile = filename_noext_ascii + ".png"
    #pngframefile = "/out/frame0000.png"
    svgexport_data.append({"input": [abspath(svgframefile)],
                           "output": [[abspath(pngframefile),
                                       "%d:%d" % (GIF_SIZE, GIF_SIZE)]]})

    style = E.style(static_css, id="style-Kanimaji")
    doc.getroot().insert(0, style)
    doc.write(svgframefile, pretty_print=True)
    doc.getroot().remove(style)
    print 'written %s' % svgframefile

    # create json file
    svgexport_datafile = filename_noext_ascii+"_export_data.json"
    with open(svgexport_datafile, 'w') as f:
        f.write(json.dumps(svgexport_data))
    print 'created instructions %s' % svgexport_datafile

    # run svgexport
    cmdline = 'svgexport %s' % shescape(svgexport_datafile)
    print cmdline
    if os.system(cmdline) != 0:
        exit('Error running external command')


if GENERATE_GIF and GIF_BACKGROUND_COLOR == 'transparent' and not GIF_ALLOW_TRANSPARENT:
    exit(d("""
    ******************************************************************
    WARNING: "transparent" not allowed by default as gif background,
      because generated files are 10x bigger. If you are really sure
      set GIF_ALLOW_TRANSPARENT to True in settings.py and rerun.
    ******************************************************************
    """))

args = deepcopy(sys.argv)
del args[0]
for a in args:
    create_image(a)
